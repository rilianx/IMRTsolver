#!/bin/bash
###############################################################################
#
# PARAMETERS:
# $1 is the ID of the candidate configuration to be evaluated
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters for running the target algorithm
#
# RETURN VALUE:
# This script should print a single numerical value (the value to be minimized).
###############################################################################
error() {
    echo "`TZ=UTC date`: $0: error: $@" >&2
    exit 1
}


# Path to the target algorithm executable:
EXE="~/imrt/python3 imrt4irace.py"

# Fixed parameters that should be always passed to the algorithm.
FIXED_PARAMS=""

CONFIG_ID="$1"
INSTANCE_ID="$2"
SEED="$3"
INSTANCE="$4"
# All other parameters are the candidate parameters to be passed to program
shift 5 || error "Not enough parameters"
CONFIG_PARAMS=$*

STDOUT=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stdout
STDERR=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stderr

if [ ! -x "${EXE}" ]; then
    error "${EXE}: not found or not executable (pwd: $(pwd))"
fi

#echo "$EXE ${FIXED_PARAMS} $INSTANCE --seed $SEED ${CONFIG_PARAMS}"
# Now we can call the target by building a command line with all parameters for it
$EXE $INSTANCE $SEED ${CONFIG_PARAMS} 1> $STDOUT 2> $STDERR

# The output of the candidate $CONFIG_ID should be written in the file
# c${CONFIG_ID}.stdout.
# Does this file exist?
if [ ! -s "${STDOUT}" ]; then
    # In this case, the file does not exist. Let's exit with a value
    # different from 0. In this case irace will stop with an error.
    error "${STDOUT}: No such file or directory"
fi

# Ok, the file exist. It contains the whole output written by the target algorithm.
# This script should return a single numerical value, the best objective
# value found by this run. The following line is to extract
# this value from the file containing the output.
COST=$(tail -20 ${STDOUT} | grep -o -E 'Best solution found: [-+0-9.e]+' | cut -d ':' -f2)
COST=${COST//' '/''}
if ! [[ "$COST" =~ ^[-+0-9.e]+$ ]] ; then
    error "${STDOUT}: Output is not a number. (${COST})"
fi

# Print it!
echo "$COST"

# We are done with our duty. Clean files and exit with 0 (no error).
rm -f "${STDOUT}" "${STDERR}"
exit 0
